#!/usr/bin/env zsh

hc() { herbstclient "$@" }

run() { if ! pgrep -f $1 ; then $@&; fi }

hc emit_hook reload

xsetroot -solid '#19202A'

# start conky
#run conky --daemonize --pause=1

# start power manager
run xfce4-power-manager

# set focus to first monitor and position mouse top right
if hc silent new_attr bool my_not_first_autostart
then
    synology-cloud-station-drive autostart &
fi

# remove all existing keybindings
hc keyunbind --all

# keybindings ( Mod1 = Alt; Mod4 = Super )
# Use the super key as the main modifier
Mod=Mod4

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-c close
hc keybind $Mod-Shift-x spawn $HOME/.config/utils/powermenu
hc keybind $Mod-Shift-z spawn betterlockscreen -l

hc keybind $Mod-Return  spawn alacritty

# Application keybindings
hc keybind $Mod-space   spawn rofi -show combi
hc keybind $Mod-p       spawn rofi -modi "clipboard:greenclip print" -show clipboard -run-command '{cmd}'

hc keybind $Mod-b       chain : lock : use_index 4 : spawn vivaldi-stable : unlock             # browser → tag 5
hc keybind $Mod-Shift-b chain : lock : use_index 5 : spawn vivaldi-stable --incognito : unlock # browser (private) → tag 6

hc keybind Print          spawn flameshot gui  # screen capture
hc keybind XF86Calculator spawn galculator     # calculator

# Volume Control
hc keybind $Mod-Control-v spawn pavucontrol
hc keybind $Mod-Shift-v   spawn $HOME/.config/utils/switchaudio

hc keybind XF86AudioMute        spawn pactl set-sink-mute @DEFAULT_SINK@ toggle
hc keybind XF86AudioRaiseVolume spawn pactl set-sink-volume @DEFAULT_SINK@ +1%
hc keybind XF86AudioLowerVolume spawn pactl set-sink-volume @DEFAULT_SINK@ -1%
hc keybind XF86AudioPlay        spawn playerctl play-pause

# basic movement in tiling and floating mode
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right

# moving clients
hc keybind $Mod-Shift-Left   shift left
hc keybind $Mod-Shift-Down   shift down
hc keybind $Mod-Shift-Up     shift up
hc keybind $Mod-Shift-Right  shift right

# splitting frames
# create and focus an empty frame at the specified direction
hc keybind $Mod-u          chain : split bottom 0.5  : focus down
hc keybind $Mod-o          chain : split right  0.5  : focus right
hc keybind $Mod-Control-o  chain : split right  0.66 : focus right

# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-Left   resize left  +$resizestep
hc keybind $Mod-Control-Down   resize down  +$resizestep
hc keybind $Mod-Control-Up     resize up    +$resizestep
hc keybind $Mod-Control-Right  resize right +$resizestep

# focus or move to monitor
hc keybind $Mod-BackSpace       cycle_monitor
hc keybind $Mod-Shift-BackSpace shift_to_monitor +1

# default frame layout: 0 vertical | 1 horizontal | 2 max | 3 grid
hc set default_frame_layout horizontal 

# tags
tag_names=( {1..9} )
typeset -i ws_index=0 # use this to set workspace indices, as zsh arrays are 1-based

hc rename default ${tag_names[1]} 2>/dev/null  || true
for (( i = 1; i <= $#tag_names; i++ ))
do
    hc add ${tag_names[$i]}
    if [[ $i -le 9 ]] ; then
        hc keybind "$Mod-$i" use_index $ws_index
        hc keybind "$Mod-Shift-$i" move_index $ws_index
        (( ws_index++ ))
    fi
done

# set default layout for 1st frame to horizontal
# default_frame_layout does not apply for this frame
hc load ${tag_names[1]} '(clients horizontal:0)'

# set default layout for tags "4", "5" and "6" to max
hc load ${tag_names[4]} '(clients max:0)'
hc load ${tag_names[5]} '(clients max:0)'
hc load ${tag_names[6]} '(clients max:0)'

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layout
hc keybind $Mod-r       remove
hc keybind $Mod-s       floating   toggle
hc keybind $Mod-f       set_attr   clients.focus.floating toggle
hc keybind $Mod-Shift-f fullscreen toggle
hc keybind $Mod-Shift-p pseudotile toggle

hc keybind $Mod-g set_layout grid
hc keybind $Mod-h set_layout horizontal
hc keybind $Mod-m set_layout max
hc keybind $Mod-v set_layout vertical

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-l                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
hc keybind $Mod-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc attr theme.background_color '#141414'

# frame
hc set frame_padding 0
hc set frame_gap 6
hc set frame_border_width 1
hc set frame_transparent_width 4

hc set always_show_frame on
hc set frame_bg_transparent on

hc set frame_border_active_color '#AA00AA'
hc set frame_bg_active_color     '#555555'
hc set frame_border_normal_color '#101010'
hc set frame_bg_normal_color     '#004000'

# window border: border_width = inner_width + outer_width + {remaining width (color)}
hc attr theme.border_width 3
hc attr theme.inner_width 1
hc attr theme.outer_width 1
hc attr theme.floating.border_width 6

# colors
hc attr theme.inner_color        '#202020'
hc attr theme.active.inner_color '#3E4A00'

hc attr theme.outer_color        '#454545'
hc attr theme.active.outer_color '#AA00AA'

hc attr theme.color              '#454545'
hc attr theme.active.color       '#AA00AA'
hc attr theme.urgent.color       orange

hc attr theme.floating.active.color       '#006500'
hc attr theme.floating.active.outer_color '#006500'

hc set window_gap 1
hc set smart_window_surroundings off
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0

# rules
hc unrule -F

hc rule focus=on # normally focus new clients
hc rule floatplacement=smart

# Clients with fixed tags
hc rule class=Code                  tag=3 switchtag=on
hc rule class=Clementine            tag=8
hc rule class="Gimp-2.10"           tag=4 switchtag=on
hc rule class="Inkscape"            tag=4 switchtag=on
hc rule class=org.remmina.Remmina   tag=9
hc rule class="VirtualBox Machine"  tag=9 switchtag=on 

# floating clients
hc rule class=Galculator    floating=on floatplacement=center
hc rule class=Gucharmap     floating=on floatplacement=smart
hc rule class=gl            floating=on floatplacement=smart
hc rule class=Lxappearance  floating=on floatplacement=smart
hc rule class=matplotlib    floating=on floatplacement=smart
hc rule class=Matplotlib    floating=on floatplacement=smart
hc rule class=mpv           floating=on floatplacement=center
hc rule class=Seahorse      floating=on floatplacement=center

hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on floatplacement=center
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'
hc set swap_monitors_to_get_tag 1

# set watch to trap layout changes for display in Polybar
hc watch tags.focus.tiling.focused_frame.algorithm

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1920x1080+0+0 1920x1080+1920+0
# or simply:
hc detect_monitors

typeset -a monitor_list
typeset -a rect

for m in $(hc list_monitors | cut -d: -f1)
do
    rect=( $(hc monitor_rect $m) )

    if [[ $m -eq "0" ]]
    then
        rect[2]=25
        rect[4]=$(( ${rect[4]} - 25 ))
    fi

    monitor_list+="${rect[3]}x${rect[4]}+${rect[1]}+${rect[2]}"
done

hc set_monitors $monitor_list

hc focus_monitor 0
xpos=$(hc list_monitors | awk -F "x" '/0:/ { split($1,b," "); print b[2]-30 }')
xte "mousemove $xpos 30"

# start polybar panel and related scripts. Also starts dunst if it is not already running
sleep 1
~/.config/polybar/panel.sh &
